name: Commit Workflow
on:
  repository_dispatch:
    types: commit


env:
  IN: ${{ github.event.client_payload.list_of_servers_patched }}
  TAG: ${{ github.event.client_payload.docker_image_tag }}
  ARENA_TAG: ${{ github.event.client_payload.arena_simulation_server_image_tag }}
  STATIC_DATA_VER: ${{ github.event.client_payload.static_data_version }}
  CORE_VERSION_MAP: ${{ github.event.client_payload.core_version_map }}
  DATA_PACK_VERSION_MAP: ${{ github.event.client_payload.data_pack_version_map }}
  NO_INPUT: "입력한 값이 없습니다"

jobs:
  commit:
    env:
      TARGET_BRANCH: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TRIGGER_COMMIT_ON_MAIN }}
      - name: Check core version map
        id: check-core-version-map
        if: ${{ env.CORE_VERSION_MAP }}
        continue-on-error: true
        run: |
          error=$(python3 .github/workflows/check-map-data.py -name "CoreVersionMap" -data "${{ env.CORE_VERSION_MAP }}" || true)
          if [ -n "$error" ]; then
            echo "error=$error" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Check data pack version map
        id: check-data-pack-version-map
        if: ${{ env.DATA_PACK_VERSION_MAP }}
        continue-on-error: true
        run: |
          error=$(python3 .github/workflows/check-map-data.py -name "DataPackVersionMap" -data "${{ env.DATA_PACK_VERSION_MAP }}" || true)
          if [ -n "$error" ]; then
            echo "error=$error" >> $GITHUB_OUTPUT
            exit 1
          fi
      - name: Final check
        if: ${{ steps.check-core-version-map.outcome == 'failure' || steps.check-data-pack-version-map.outcome == 'failure' }}
        run: |
          ${{ format('CoreVersionMap: {0}, DataPackVersionMap: {1}', 
          steps.check-core-version-map.outcome == 'failure' && steps.check-core-version-map.outputs.error || 'no-error-on-coreVersionMap', 
          steps.check-data-pack-version-map.outcome == 'failure' && steps.check-data-pack-version-map.outputs.error || 'no-error-on-dataPackVersionMap') }}
          exit 1
      - name: Update BOT.md
        run: |
          echo "This is a test commit from the **commit workflow**." > BOT.md
          echo "Current date and time: $(date)" >> BOT.md
          cat BOT.md

      - name: Commit changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git diff --quiet && echo "No changes to commit" && exit 0
          git add BOT.md

          COMMIT_MESSAGE="[BOT] 서버 패치 커밋: $IN

          도커 이미지 태그: $TAG
          아레나 시뮬레이션 서버 이미지 태그: $ARENA_TAG
          스테틱 데이터 버전: $STATIC_DATA_VER
          CoreVersionMap: $CORE_VERSION_MAP
          DataPackVersionMap: $DATA_PACK_VERSION_MAP"
          git commit -m "$COMMIT_MESSAGE"
      - name: Push changes
        id: push
        run: |
          REMOTE_REPO="https://oauth2:${{ secrets.TRIGGER_COMMIT_ON_MAIN }}@github.com/${{ github.repository }}.git"

          MAX_RETRIES=5
          for COUNT in $(seq 1 $MAX_RETRIES); do
            if git push "$REMOTE_REPO" "HEAD:$TARGET_BRANCH"; then
              echo "Push successful on attempt $COUNT."
              break
            fi
            echo "Push failed, retrying... ($COUNT/$MAX_RETRIES)"
            git pull --rebase "$REMOTE_REPO" "$TARGET_BRANCH"
            sleep 5
          done

          if [ $COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to push changes after $MAX_RETRIES attempts."
            exit 1
          fi
          
      - name: Get commit hash
        run: |
          echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "Push step outputs: ${{ toJson(steps.push.outputs) }}"

      - name: Make commit URL
        run: |
          echo "COMMIT_URL=${{ github.server_url }}/${{ github.repository }}/commit/${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
